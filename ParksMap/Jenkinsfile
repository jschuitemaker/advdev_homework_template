// Jenkinsfile for ParksMap

// TODO replace ip with "docker-registry.default.svc
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "172.30.1.1:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
    node('skopeo-pod') {
      echo "GUID: ${GUID}"
      echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

      // Checkout Source Code
      stage('Checkout Source') {
        // should be enough, because we already set the git location in the pipeline definition
        checkout scm
      }

      // setup the nexus_settings so it reflects our GUID and CLUSTER args
      sh "pwd"
      sh "ls"
      sh "cp ./nexus_settings.xml ./ParksMap/"
      sh "sed -i 's/GUID/${GUID}/' ./ParksMap/nexus_settings.xml"
      sh "sed -i 's/CLUSTER/${CLUSTER}/' ./ParksMap/nexus_settings.xml"
      sh "cat ./ParksMap/nexus_settings.xml"

      def mvnCmd = "mvn -s nexus_settings.xml"

      def groupId    = getGroupIdFromPom("./ParksMap/pom.xml")
      def artifactId = getArtifactIdFromPom("./ParksMap/pom.xml")
      def version    = getVersionFromPom("./ParksMap/pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      // Using Maven build the jar file
      // Do not run tests in this step
      stage('Build JAR') {
        dir("ParksMap") {
          //mvn -s ../nexus_settings.xml clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga
          sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
        }
        echo "Building version ${devTag}"
      }

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"
        dir("ParksMap") {
         sh "${mvnCmd} test"
        }
      }    
  
      // Code analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"
        dir("ParksMap") {
         sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.${CLUSTER}:9000/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"      
        }
      }    

      // Publish the built jar file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        dir("ParksMap") {
          sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.${CLUSTER}:8081/repository/releases"
        }
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image parksmap:${devTag}"
        // this will simply kick off the build, using the jar file we just maven build to target 
        sh "oc start-build parksmap --follow --from-file=./ParksMap/target/parksmap.jar -n ${GUID}-parks-dev"
        // use Jenkins plug in to tag the image
        openshiftTag alias: 'false', destStream: 'parksmap', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'parksmap', srcTag: 'latest', verbose: 'false'
      }

      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        // We need to update the dc to the new image (needed because it is versioned!)
        // sh "oc set image dc/parksmap parksmap=docker-registry.default.svc:5000/${GUID}-parks-dev/parksmap:${devTag} -n ${GUID}-parks-dev"
        // Because above 'set image' was not working (it triggered a deploy but with same image :( we're using lines below instead)
        sh "oc set triggers dc/parksmap --remove-all -n ${GUID}-parks-dev" // remove existing triggers, then add a new one
        sh "oc set triggers dc/parksmap --from-image=parksmap:${devTag} --containers=parksmap -n ${GUID}-parks-dev" 
        // Deploy the development application.
        openshiftDeploy depCfg: 'parksmap', namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: '20', waitUnit: 'min'
        openshiftVerifyDeployment depCfg: 'parksmap', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'parksmap', verbose: 'false'
      }

  } 
} 


// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
